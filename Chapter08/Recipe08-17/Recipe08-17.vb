Imports System
Imports System.Drawing
Imports System.Windows.Forms
Imports System.Drawing.Printing
'  All designed code is stored in the autogenerated partial
'  class called Recipe08-17.Designer.vb.  You can see this
'  file by selecting "Show All Files" in solution explorer.
Partial Public Class Recipe08_17

    Private doc As PrintDocument
    Private Sub Recipe08_17_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load

        '  Set the allowed zoom settings.
        For i As Integer = 1 To 10
            lstZoom.Items.Add((i * 10).ToString)
        Next

        '  Create a document with 100 lines.
        Dim printText As String() = New String(100) {}

        For i As Integer = 1 To 100
            printText(i) = i.ToString
            printText(i) += ": The quick brown fox jumps over the lazy dog."
        Next

        Dim doc As New TextDocument(printText)

        AddHandler doc.PrintPage, AddressOf Doc_PrintPage

        lstZoom.Text = "100"
        printPreviewControl.Zoom = 1
        printPreviewControl.Document = doc
        printPreviewControl.Rows = 2

    End Sub
    Private Sub cmdPrint_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPrint.Click

        '  Set the zoom.
        printPreviewControl.Zoom = Single.Parse(lstZoom.Text) / 100

        '  Rebind the PrintDocument to refresh the preview.
        printPreviewControl.Document = doc

    End Sub
    Private Sub Doc_PrintPage(ByVal sender As Object, ByVal e As PrintPageEventArgs)

        '  Retrieve the document that sent this event.
        Dim doc As TextDocument = DirectCast(sender, TextDocument)

        '  Determine the font and determine the line height.
        Using fnt As New Font("Arial", 10)
            Dim lineHeight As Single = Font.GetHeight(e.Graphics)

            '  Create variables to hol dposition on page.
            Dim x As Single = e.MarginBounds.Left
            Dim y As Single = e.MarginBounds.Top

            '  Increment the page counter (to reflect the page that
            '  is about to be printed).
            doc.PageNumber += 1

            '  Print all the information that can fit on the page.
            '  This loop ends when the next line would go over the
            '  margin bounds, or there are no more lines to print.
            While ((y + lineHeight) < e.MarginBounds.Bottom And doc.Offset <= doc.Text.GetUpperBound(0))
                e.Graphics.DrawString(doc.Text(doc.Offset), Font, Brushes.Black, x, y)

                '  Move to the next line of data.
                doc.Offset += 1

                '  Move the equivalent of one line down the page.
                y += lineHeight
            End While

            If doc.Offset < doc.Text.GetUpperBound(0) Then
                '  There is still at least one more page.  Signal
                '  this event to fire again.
                e.HasMorePages = True
            Else
                '  Printing is complete.
                doc.Offset = 0
            End If

        End Using

    End Sub

End Class
Public Class TextDocument
    Inherits PrintDocument

    Private m_Text As String()
    Private m_PageNumber As Integer
    Private m_Offset As Integer
    Public Sub New(ByVal txt As String())

        Me.Text = txt

    End Sub
    Public Property Text() As String()
        Get
            Return m_Text
        End Get
        Set(ByVal value As String())
            m_Text = value
        End Set
    End Property
    Public Property PageNumber() As Integer
        Get
            Return m_PageNumber
        End Get
        Set(ByVal value As Integer)
            m_PageNumber = value
        End Set
    End Property
    Public Property Offset() As Integer
        Get
            Return m_Offset
        End Get
        Set(ByVal value As Integer)
            m_Offset = value
        End Set
    End Property

End Class
